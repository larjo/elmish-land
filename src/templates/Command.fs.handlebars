namespace Elmish

open Elmish

type Command<'msg, 'sharedMsg> private =
    | None
    | Batch of Command<'msg, 'sharedMsg> list
    | Cmd of Cmd<'msg>
    | SharedMsg of 'sharedMsg

module Command =
    let none = None

    let ofPromise p arg ofSuccess = Cmd.OfPromise.perform p arg ofSuccess |> Cmd

    let tryOfPromise p arg ofSuccess ofError = Cmd.OfPromise.either p arg ofSuccess ofError |> Cmd

    let ofCmd (cmd: Cmd<'msg>) = Cmd(cmd)

    let ofMsg (msg: 'msg) =
        Cmd(Cmd.ofMsg msg)

    let batch cmds = Batch cmds

    let ofShared msg = SharedMsg msg

    let rec map f command =
        match command with
        | None -> None
        | Batch cmds -> Batch (cmds |> List.map (map f))
        | Cmd cmd -> Cmd (Cmd.map f cmd)
        | SharedMsg msg -> SharedMsg msg

    let rec toCmd fromSharedMsg command =
        match command with
        | None -> Cmd.none
        | Batch cmds -> Cmd.batch (List.map (toCmd fromSharedMsg) cmds)
        | Cmd cmd -> cmd
        | SharedMsg msg -> Cmd.ofMsg (fromSharedMsg msg)
