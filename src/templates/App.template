//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by elmish-land.
//
//     Changes to this file may cause incorrect behavior and will be lost when
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

module ElmishLand.{{RootModule}}.App

open Elmish
open Elmish.HMR
open Feliz
open Feliz.Router
open ElmishLand
open {{RootModule}}
open {{RootModule}}.Shared

[<RequireQualifiedAccess>]
type PageModel =
    {{#each Routes}}
    | {{Name}} of {{ModuleName}}.Model
    {{/each}}
    | NotFound

[<RequireQualifiedAccess>]
type LayoutModel =
    {{#each Layouts}}
    | {{Name}} of {{ModuleName}}.Model
    {{/each}}
    | None

type Model = {
    Shared: SharedModel
    CurrentRoute: Route
    CurrentPage: PageModel
    CurrentLayout: LayoutModel
}

[<RequireQualifiedAccess>]
type PageMsg =
    {{#each Routes}}
    | {{MsgName}} of {{ModuleName}}.Msg
    {{/each}}

[<RequireQualifiedAccess>]
type LayoutMsg =
    {{#each Layouts}}
    | {{MsgName}} of {{ModuleName}}.Msg
    {{/each}}
    | NoOp

type Msg =
    | SharedMsg of SharedMsg
    | RouteChanged of Route
    | PageMsg of PageMsg
    | LayoutMsg of LayoutMsg

let rec commandToCmd fromSharedMsg fromLayoutMsg command =
    match command with
    | Command.None -> Cmd.none
    | Command.Batch cmds -> Cmd.batch (List.map (commandToCmd fromSharedMsg fromLayoutMsg) cmds)
    | Command.Cmd cmd -> cmd
    | Command.SharedMsg msg -> Cmd.ofMsg (fromSharedMsg msg)
    | Command.LayoutMsg msg -> Cmd.ofMsg (fromLayoutMsg msg)

{{#each Layouts}}
let get{{Name}}Layout (layoutProps: 'layoutProps, currentLayout, sharedModel) route =
    match currentLayout with
    | Some (LayoutModel.{{Name}} m) -> m, Command.none
    | _ ->
        let m, cmd = ({{ModuleName}}.layout sharedModel).Init (box layoutProps :?> {{ModuleName}}.Props) route
        m, Command.map (LayoutMsg.{{MsgName}} >> LayoutMsg) (LayoutMsg.{{MsgName}} >> LayoutMsg) cmd

{{/each}}
type Page'<'msg, 'pageModel, 'layoutModel, 'layoutMsg, 'route> =
    {
        Init: SharedModel -> 'layoutModel -> 'route -> 'pageModel * Command<Msg, SharedMsg, Msg>
        Update: SharedModel -> 'layoutModel -> 'msg -> 'pageModel -> 'pageModel * Command<Msg, SharedMsg, Msg>
        View: SharedModel -> 'layoutModel -> 'pageModel -> ('msg -> unit) -> {{ViewType}}
        Subscriptions: 'pageModel -> (string list * (('msg -> unit) -> System.IDisposable)) list
    }

let mapPage (f: 'pageMsg -> Msg) (mapLayout: 'layoutMsg -> Msg) (p: Page<SharedMsg, SharedModel, 'route, 'pageModel, 'pageMsg, 'layoutModel, 'layoutMsg, 'layoutProps>)
    : Page'<'pageMsg, 'pageModel, 'layoutModel, 'layoutMsg, 'route> =
    let init sharedModel layoutModel route =
        p.Init sharedModel layoutModel route
        |> fun (m, c) ->
            m, Command.map f mapLayout c
    let update sharedModel layoutModel =
        p.Update sharedModel layoutModel >>
        fun f' -> f'
                >> fun (m: 'pageModel, c: Command<'pageMsg, SharedMsg, 'layoutMsg>) ->
                    (m, Command.map f mapLayout c)
    {
        Init = init
        Update = update
        View = p.View
        Subscriptions = p.Subscriptions
    }

let init () =
    let initialUrl = Route.parse (Router.currentUrl ())
    let sharedModel, sharedCmd = Shared.init ()

    let defaultModel = {
        Shared = sharedModel
        CurrentRoute = initialUrl
        CurrentPage = PageModel.NotFound
        CurrentLayout = LayoutModel.None
    }

    let initPage (page: Page'<'msg, 'pageModel, 'layoutModel, 'layoutMsg, 'route>) pageModel layoutModel mapLayoutModel layoutCmd route  =
        let nextModel, nextCmd = page.Init sharedModel layoutModel route
        let nextPage = pageModel nextModel

        {
            defaultModel with
                CurrentPage = nextPage
                CurrentLayout = mapLayoutModel layoutModel
        },
        Command.batch [ sharedCmd; layoutCmd; nextCmd ] |> commandToCmd SharedMsg id

    match initialUrl with
    {{#each Routes}}
    | Route.{{Name}} route ->
        let page = {{ModuleName}}.page ()
        let layoutModel, layoutCmd = get{{LayoutName}}Layout (page.LayoutProps, None, sharedModel) (Route.{{Name}} route)
        let p = mapPage (PageMsg.{{MsgName}} >> PageMsg) (LayoutMsg.{{LayoutName}}Msg >> LayoutMsg) page
        initPage p PageModel.{{Name}} layoutModel LayoutModel.{{LayoutName}} layoutCmd route
    {{/each}}
    | Route.NotFound ->
        {
            defaultModel with
                CurrentPage = PageModel.NotFound
        },
        Cmd.none

let update (msg: Msg) (model: Model) =
    let updatePage (page: Page'<'msg, 'pageModel, 'layoutModel, 'layoutMsg, 'route>) pageModel mapPageModel pageMsg layoutModel =
        let pm, cmd = page.Update model.Shared layoutModel pageMsg pageModel

        {
            model with
                CurrentPage = mapPageModel pm
        },
        commandToCmd SharedMsg id cmd

    let updateLayout (layout: Layout<_,_,_,_>) layoutModel mapLayoutModel layoutMsg msg =
        let lm, cmd = layout.Update layoutMsg layoutModel

        {
            model with
                CurrentLayout = mapLayoutModel lm
        },
        Command.map msg msg cmd |> commandToCmd SharedMsg id

    match msg with
    | SharedMsg msg' ->
        let model'', cmd = Shared.update msg' model.Shared
        { model with Shared = model'' }, commandToCmd SharedMsg Unchecked.defaultof<_> cmd
    | RouteChanged nextRoute ->
        let changeRoute (page: Page'<'msg, 'pageModel, 'layoutModel, 'layoutMsg, 'route>) pageModel layoutModel mapLayoutModel layoutCmd route =
            let model', msg' = page.Init model.Shared layoutModel route
            {
                model with
                    CurrentPage = pageModel model'
                    CurrentRoute = nextRoute
                    CurrentLayout = mapLayoutModel layoutModel
            },
            Command.batch [ layoutCmd; msg' ] |> commandToCmd SharedMsg id

        match nextRoute with
        {{#each Routes}}
        | Route.{{Name}} route ->
            let page = {{ModuleName}}.page ()
            let layoutModel, layoutCmd = get{{LayoutName}}Layout (page.LayoutProps, Some model.CurrentLayout, model.Shared) (Route.{{Name}} route)
            let p = mapPage (PageMsg.{{Name}}Msg >> PageMsg) (LayoutMsg.{{LayoutName}}Msg >> LayoutMsg) page
            changeRoute p PageModel.{{Name}} layoutModel LayoutModel.{{LayoutName}} layoutCmd route
        {{/each}}
        | Route.NotFound ->
            {
                model with
                    CurrentPage = PageModel.NotFound
                    CurrentRoute = Route.NotFound
                    CurrentLayout = LayoutModel.None
            },
            Cmd.none
    | PageMsg pageMsg ->
        match pageMsg, model.CurrentPage, model.CurrentLayout with
        {{#each Routes}}
        | PageMsg.{{MsgName}} msg', PageModel.{{Name}} model', LayoutModel.{{LayoutName}} layout ->
            let page = {{ModuleName}}.page ()
            let p = mapPage (PageMsg.{{Name}}Msg >> PageMsg) (LayoutMsg.{{LayoutName}}Msg >> LayoutMsg) page
            updatePage p model' PageModel.{{Name}} msg' layout
        {{/each}}
        | msg', model', layout' ->
            printfn $"Unhandled PageMsg, CurrentPage.Model, CurrentRoute amd CurrentLayout. Got\nMsg:\n%A{msg'}\nCurrentPage.Model:\n%A{model'}\nCurrentLayout:\n%A{layout'}'"
            model, Cmd.none
    | LayoutMsg layoutMsg ->
        match layoutMsg, model.CurrentLayout with
        {{#each Layouts}}
        | LayoutMsg.{{MsgName}} msg', LayoutModel.{{Name}} model' ->
            updateLayout ({{ModuleName}}.layout model.Shared) model' LayoutModel.{{Name}} msg' (LayoutMsg.{{MsgName}} >> LayoutMsg)
        {{/each}}
        | msg', model' ->
            printfn $"Unhandled LayoutMsg, CurrentLayout.Model. Got\nMsg:\n%A{msg'}\nCurrentLayout.Model:\n%A{model'}"
            model, Cmd.none

let inline (|Renderable|) (o: 'x when 'x: (member Render: unit -> ReactElement)) = o

let view (model: Model) (dispatch: Msg -> unit) =
    let currentPageView =
        match model.CurrentPage, model.CurrentLayout with
        {{#each Routes}}
        | PageModel.{{Name}} m, LayoutModel.{{LayoutName}} layoutModel ->
            let page = {{ModuleName}}.page ()
            page.View model.Shared layoutModel m (PageMsg.{{MsgName}} >> PageMsg >> dispatch)
        {{/each}}
        | _ -> failwith "Page not found"

    let currentView =
        match model.CurrentLayout with
        {{#each Layouts}}
        | LayoutModel.{{Name}} m ->
            ({{ModuleName}}.layout model.Shared).View model.CurrentRoute m currentPageView (LayoutMsg.{{MsgName}} >> LayoutMsg >> dispatch)
        {{/each}}
        | LayoutModel.None -> currentPageView

    let currentReactElement =
        {{#if ViewTypeIsReact}}
        currentView
        {{else}}
        match currentView with
        | Renderable x -> x.Render()
        {{/if}}

    React.router [
        router.onUrlChanged (Route.parse >> RouteChanged >> dispatch)
        router.children [ currentReactElement ]
    ]

let subscribe model =
    Sub.batch [
        match model.CurrentLayout with
        {{#each Layouts}}
        | LayoutModel.{{Name}} m -> Sub.map "Layout{{Name}}" (LayoutMsg.{{MsgName}} >> LayoutMsg) (({{ModuleName}}.layout model.Shared).Subscriptions m)
        {{/each}}
        | _ -> Sub.none
        match model.CurrentPage, model.CurrentRoute, model.CurrentLayout with
        {{#each Routes}}
        | PageModel.{{Name}} m, Route.{{Name}} route, LayoutModel.{{LayoutName}} layoutModel ->
            Sub.map "Page{{Name}}" (PageMsg.{{MsgName}} >> PageMsg) (({{ModuleName}}.page ()).Subscriptions m)
        {{/each}}
        | _ -> Sub.none
    ]

Program.mkProgram init update view
|> Program.withErrorHandler (fun (msg, ex) -> printfn "Program error handler:\r\n%s\r\n%O" msg ex)
|> Program.withReactBatched "app"
|> Program.withSubscription subscribe
|> Program.run
