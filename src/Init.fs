module ElmishLand.Init

open System
open System.IO
open System.Threading
open ElmishLand.Base
open ElmishLand.TemplateEngine
open ElmishLand.Log
open ElmishLand.DotNetCli
open ElmishLand.Process
open ElmishLand.AppError
open ElmishLand.FsProj

let getNodeVersion () =
    runProcess (FilePath.fromString Environment.CurrentDirectory) "node" [| "-v" |] CancellationToken.None ignore
    |> Result.mapError (fun _ -> AppError.NodeNotFound)
    |> Result.bind (fun output ->
        match Version.TryParse(output[1..]) with
        | true, version when version >= minimumRequiredNode -> Ok version
        | _ -> Error NodeNotFound)

let init (projectDir: AbsoluteProjectDir) =
    let log = Log()

    try
        let projectName = projectDir |> ProjectName.fromProjectDir

        result {
            let log = Log()
            let! dotnetSdkVersion = getLatestDotnetSdkVersion ()
            Log().Debug("Using .NET SDK: {}", dotnetSdkVersion)

            let! nodeVersion = getNodeVersion ()
            Log().Debug("Using Node.js: {}", nodeVersion)

            log.Debug("Initializing project. {}", AbsoluteProjectDir.asString projectDir)

            let writeResource = writeResource projectDir false

            let fsProjPath = FsProjPath.fromProjectDir projectDir
            log.Debug("Project path {}", fsProjPath)

            let fsProjExists = File.Exists(FsProjPath.asString fsProjPath)

            writeResource
                "Project.fsproj.handlebars"
                [ $"%s{ProjectName.asString projectName}.fsproj" ]
                (Some(
                    handlebars {|
                        DotNetVersion = (DotnetSdkVersion.asFrameworkVersion dotnetSdkVersion)
                    |}
                ))

            writeResource
                "global.json.handlebars"
                [ "global.json" ]
                (Some(
                    handlebars {|
                        DotNetSdkVersion = (DotnetSdkVersion.asString dotnetSdkVersion)
                    |}
                ))

            writeResource "index.html" [ "index.html" ] None

            writeResource
                "package.json.handlebars"
                [ "package.json" ]
                (Some(
                    handlebars {|
                        ProjectName = projectName |> ProjectName.asString |> String.asKebabCase
                    |}
                ))

            writeResource "settings.json" [ ".vscode"; "settings.json" ] None

            let rootModuleName = projectName |> ProjectName.asString |> quoteIfNeeded

            let routeData =
                if fsProjExists then
                    getRouteData projectDir
                else
                    let homeRoute = {
                        Name = "Home"
                        MsgName = "HomeMsg"
                        ModuleName = $"%s{rootModuleName}.Pages.Home.Page"
                        ArgsDefinition = ""
                        ArgsUsage = ""
                        ArgsPattern = ""
                        Url = "/"
                        UrlPattern = "[]"
                        UrlPatternWithQuery = "[]"
                    }

                    let routeData = {
                        Autogenerated = autogenerated.Value
                        RootModule = rootModuleName
                        Routes = [| homeRoute |]
                    }

                    writeResource
                        "Page.handlebars"
                        [ "src"; "Pages"; "Home"; "Page.fs" ]
                        (Some(
                            handlebars {|
                                RootModule = rootModuleName
                                Route = homeRoute
                            |}
                        ))

                    routeData

            log.Debug("Using route data {}", routeData)

            writeResource "Shared.handlebars" [ "src"; "Shared.fs" ] (Some(handlebars routeData))

            generateRoutesAndApp projectDir routeData

            do! validate projectDir

            do!
                [
                    if not (FilePath.exists projectDir [ ".config"; "dotnet-tools.json" ]) then
                        "dotnet", [| "new"; "tool-manifest"; "--force" |]
                    for name, version in dotnetToolDependencies do
                        "dotnet", [| "tool"; "install"; name; version |]
                    yield! dependencyCommands
                ]
                |> List.map (fun (cmd, args) ->
                    AbsoluteProjectDir.asFilePath projectDir, cmd, args, CancellationToken.None, ignore)
                |> runProcesses
        }
        |> handleAppResult projectDir (fun () ->
            $"""%s{commandHeader $"created a new project in ./%s{ProjectName.asString projectName}"}
Run the following command to start the development server:

dotnet elmish-land server
"""
            |> log.Info)

    with :? IOException as ex ->
        log.Error ex.Message
        -1
